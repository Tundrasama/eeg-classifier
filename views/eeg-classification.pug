doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    title EEG Classifier
    script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js')
    link(rel='stylesheet', type='text/css', href='css/newstyle.css')
    // <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  body
    form#classForm.classForm(action='/eeg-classification', method='POST')
      .grid-container
        .Header
          p EEG Classifier
        //
          <div class="Montage">
          <p>Montage</p>
          <input type="radio" name="montage" value="bipolar" />
          <label>Bipolar</label>
          <input type="radio" name="montage" value="average" />
          <label>Average</label>
          </div>
        //
          <div class="Pass">
          <p>Pass</p>
          </div>
        .Select-All
          p
            u ALL
          // <label class="checkbox-container">
          input#select_all.selectall(type='checkbox', name='select_all')
          //
            <span class="checkmark"></span>
            </label>
        .Select-Channel
          p
            u CHAIN
          .input-check-channel
            input#select_channel_1(type='checkbox', name='channel_1_select_all')
            br
            input#select_channel_2(type='checkbox', name='channel_2_select_all')
            br
            input#select_channel_3(type='checkbox', name='channel_3_select_all')
            br
            input#select_channel_4(type='checkbox', name='channel_4_select_all')
            br
            input#select_channel_5(type='checkbox', name='channel_5_select_all')
            br
        .Select-Ind
          p(style='text-align: center;')
            u IND
          #checklist1.input-check-ind
            input.channel1(type='checkbox', name='channel_1', value='true')
            | Fp1-F7
            br
            input.channel1(type='checkbox', name='channel_2', value='true')
            | F7-T3
            br
            input.channel1(type='checkbox', name='channel_3', value='true')
            | T3-T5
            br
            input.channel1(type='checkbox', name='channel_4', value='true')
            | T5-O1
            br
            br
          #checklist2.input-check-ind
            input.channel2(type='checkbox', name='channel_5', value='true')
            | Fp2-F8
            br
            input.channel2(type='checkbox', name='channel_6', value='true')
            | F8-T4
            br
            input.channel2(type='checkbox', name='channel_7', value='true')
            | T4-T6
            br
            input.channel2(type='checkbox', name='channel_8', value='true')
            | T6-O2
            br
            br
          #checklist3.input-check-ind
            input.channel3(type='checkbox', name='channel_9', value='true')
            | Fp1-F3
            br
            input.channel3(type='checkbox', name='channel_10', value='true')
            | F3-C3
            br
            input.channel3(type='checkbox', name='channel_11', value='true')
            | C3-P3
            br
            input.channel3(type='checkbox', name='channel_12', value='true')
            | P3-O1
            br
            br
          #checklist4.input-check-ind
            input.channel4(type='checkbox', name='channel_13', value='true')
            | Fp2-F4
            br
            input.channel4(type='checkbox', name='channel_14', value='true')
            | F4-C4
            br
            input.channel4(type='checkbox', name='channel_15', value='true')
            | C4-P4
            br
            input.channel4(type='checkbox', name='channel_16', value='true')
            | P4-O2
            br
            br
          #checklist5.input-check-ind
            input.channel5(type='checkbox', name='channel_17', value='true')
            | Fz-Cz
            br
            input.channel5(type='checkbox', name='channel_18', value='true')
            | Cz-Pz
            br
            br
        .Images
          // may want to constrain the image or adjust the checkboxes to match up with the image
          // src="media/eeg-picture.JPG"
          img#currImage.currImage(src=imgSource)
          p User Classifications: #{userImageCount} of #{totalImageCount}
        .Frequencies
          p Frequency (Hz)
          input.frequency(type='radio', name='frequency', value='<0.5')
          label <0.5
          input.frequency(type='radio', name='frequency', value='0.5')
          label 0.5
          input.frequency(type='radio', name='frequency', value='1.0')
          label 1.0
          input.frequency(type='radio', name='frequency', value='1.5')
          label 1.5
          input.frequency(type='radio', name='frequency', value='2.0')
          label 2.0
          input.frequency(type='radio', name='frequency', value='2.5')
          label 2.5
          input.frequency(type='radio', name='frequency', value='3.0')
          label 3.0
          input.frequency(type='radio', name='frequency', value='3.5')
          label 3.5
          input.frequency(type='radio', name='frequency', value='≥4.0')
          label ≥4.0
        .LPD-Header
          u LPD
          input#LPD-CHECK.LPD-CLASSIFICATION(type='checkbox', name='classChoice', value='LPD')
        .GPD-Header
          u GPD
          input#GPD-CHECK.GPD-CLASSIFICATION(type='checkbox', name='classChoice', value='GPD')
        .LPD2-Header
          u LPD2
          input#LPD2-CHECK.LPD2-CLASSIFICATION(type='checkbox', name='opt_classChoice', value='LPD2')
        #LPD.LPD
          .LPD-Type
            p
              u Type
            label
              input.lpd_type_1(type='radio', name='class_type', value='U/L')
              |                 U/L
            label
              input.lpd_type_2(type='radio', name='class_type', value='B/L Asym')
              |                 B/L Asym
          .LPD-Predom-ln1
            label
              p
                u Predominance
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='L')
              |                 L
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='F')
              |                 F
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='P')
              |                 P
            label
              // should probably exclude from POST
              input#LPD-Predom-Sel-All(type='checkbox', value='All')
              |                 All
          .LPD-Predom-ln2
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='R')
              |                 R
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='T')
              |                 T
            label
              input.LPD-PREDOM(type='checkbox', name='predom', value='O')
              |                 O
        #GPD.GPD
          .GPD-Predom-ln1
            label
              p
                u Predominance
          .GPD-Predom-ln2
            input(type='checkbox', name='predom', value='Frontal')
            label Frontal
            input(type='checkbox', name='predom', value='Occipital')
            label Occipital
            br
            input(type='checkbox', name='predom', value='Midline')
            label Midline
            input(type='checkbox', name='predom', value='Generalized')
            label Generalized
        #LPD2.LPD2
          .LPD-2-Type
            p
              u Type
            label
              input.lpd2_type_1(type='radio', name='opt_class_type', value='U/L')
              |                 U/L
            label
              input.lpd2_type_2(type='radio', name='opt_class_type', value='B/L Asym')
              |                 B/L Asym
          .LPD-2-Predom-ln1
            label
              p
                u Predominance
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='L')
              |                 L
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='F')
              |                 F
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='P')
              |                 P
            label
              input#LPD2-Predom-Sel-All(type='checkbox', name='opt_predom', value='All')
              |                 All
          .LPD-2-Predom-ln2
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='R')
              |                 R
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='T')
              |                 T
            label
              input.LPD2-PREDOM(type='checkbox', name='opt_predom', value='O')
              |                 O
        .Submit
          input#submit.button(type='submit', name='submit', value='Submit')
          input.button(type='submit', name='not_lpd_gpd', value='Not LPD/GPD')
          input.button(type='submit', name='pass', value='Pass')
    script.
      // JAVASCRIPT
      /// Need a function to return all controls to a default status
      $(document).ready(function() {
      var nextImage =
      '/media/images/LPD_Sample271_sid133_20151129_091659_018758.mat_bi.png';
      $('#urrImage').attr('src', nextImage);
      // Form Validation
      $('form input[type=submit]').click(function() {
      $('input[type=submit]', $(this).parents('form')).removeAttr(
      'clicked'
      );
      $(this).attr('clicked', 'true');
      });
      $('#classForm').submit(function(event) {
      var val = $('input[type=submit][clicked=true]').val();
      if (val == 'Submit') {
      const validationErrors = [];
      // Must have LPD or GPD selected
      if (
      $('#LPD-CHECK').prop('checked') == false &&
      $('#GPD-CHECK').prop('checked') == false
      ) {
      // alert('A Classification (LPD/GPD) must be selected');
      validationErrors.push({
      classificationError:
      'A Classification (LPD/GPD) must be selected'
      });
      event.preventDefault();
      }
      // If LPD
      if ($('#LPD-CHECK').prop('checked') == true) {
      // make sure a type is selected
      if (
      $('.lpd_type_1').is(':checked') == false &&
      $('.lpd_type_2').is(':checked') == false
      ) {
      // alert('An LPD Type must be selected');
      validationErrors.push({
      LPD1_Type_Error: 'An LPD Type must be selected'
      });
      event.preventDefault();
      }
      // make sure at least one predominance is selected
      var LPD_predoms = $('#LPD input:checkbox:checked')
      .map(function() {
      return $(this).val();
      })
      .get();
      if (LPD_predoms.length == 0) {
      // alert('At least one LPD Predominance must be selected');
      validationErrors.push({
      LPD1_Predom_Error:
      'At least one LPD Predominance must be selected'
      });
      event.preventDefault();
      }
      // If LPD-2
      if ($('#LPD2-CHECK').prop('checked') == true) {
      if (
      $('.lpd2_type_1').is(':checked') == false &&
      $('.lpd2_type_2').is(':checked') == false
      ) {
      // alert('An LPD2 Type must be selected');
      validationErrors.push({
      LPD2_Type_Error: 'An LPD2 Type must be selected'
      });
      event.preventDefault();
      }
      // make sure at least one predominance is selected
      var LPD2_predoms = $('#LPD2 input:checkbox:checked')
      .map(function() {
      return $(this).val();
      })
      .get();
      if (LPD2_predoms.length == 0) {
      //alert('At least one LPD2 Predominance must be selected');
      validationErrors.push({
      LPD2_Predom_Error:
      'At least one LPD2 Predominance must be selected'
      });
      event.preventDefault();
      }
      }
      }
      // If GPD
      if ($('#GPD-CHECK').prop('checked') == true) {
      var GPD_predoms = $('#GPD input:checkbox:checked')
      .map(function() {
      return $(this).val();
      })
      .get();
      if (GPD_predoms.length == 0) {
      // alert('At least one Predominance must be selected');
      validationErrors.push({
      GPD_Predom_Error:
      'At least one GPD Predominance must be selected'
      });
      event.preventDefault();
      }
      }
      // check for a channel
      var channels_selected = $('.Select-Ind input:checkbox:checked')
      .map(function() {
      return $(this).val();
      })
      .get();
      if (channels_selected.length == 0) {
      //alert('At least one channel must be selected');
      validationErrors.push({
      channelError: 'At least one channel must be selected'
      });
      event.preventDefault();
      }
      //check for a frequency
      var frequency = $('.Frequencies input:radio:checked')
      .map(function() {
      return $(this).val();
      })
      .get();
      if (frequency.length == 0) {
      // alert('A Frequency must be selected');
      validationErrors.push({
      frequencyError: 'A Frequency must be selected'
      });
      event.preventDefault();
      }
      if (validationErrors.length > 0) {
      alert(JSON.stringify(validationErrors));
      }
      }
      });
      // Form Functionality
      $('#select_all').click(function() {
      $('.input-check-channel input').prop('checked', this.checked);
      $('.input-check-ind input').prop('checked', this.checked);
      });
      $('.input-check-channel input').click(function(e) {
      // console.log(e.target.id + ' ' + this.checked);
      // console.log('#checklist' + e.target.id.replace('select_channel_',''));
      $(
      '#checklist' +
      e.target.id.replace('select_channel_', '') +
      ' :input'
      ).prop('checked', this.checked);
      var selected = [];
      $('.input-check-channel input:checked').each(function() {
      selected.push($(this).attr('name'));
      });
      if (selected.length == 5) {
      $('#select_all').prop('checked', this.checked);
      } else {
      $('#select_all').prop('checked', false);
      }
      });
      //TODO: can improve below
      // TODO: Need the All checkbox in predominance sections to selec tother items
      // haven't added functionality for ind checkboxes to uncheck the all
      $('#LPD-Predom-Sel-All').click(function() {
      $(this.form.elements)
      .filter('.LPD-PREDOM')
      .prop('checked', this.checked);
      $('input[name=select_all]').attr('checked', false);
      });
      $('#LPD2-Predom-Sel-All').click(function() {
      $(this.form.elements)
      .filter('.LPD2-PREDOM')
      .prop('checked', this.checked);
      $('input[name=select_all]').attr('checked', false);
      });
      disableDiv('#LPD');
      disableDiv('#GPD');
      disableDiv('#LPD2');
      disableControls();
      function disableControls() {
      $('.Select-All').fadeTo('fast', 0.49);
      $('.Select-Channel').fadeTo('fast', 0.49);
      $('.Select-Ind').fadeTo('fast', 0.49);
      $('.Frequencies').fadeTo('fast', 0.49);
      $('.Select-All :input').prop('disabled', true);
      $('.Select-Channel :input').prop('disabled', true);
      $('.Select-Ind :input').prop('disabled', true);
      $('.Frequencies :input').prop('disabled', true);
      }
      function enableControls() {
      $('.Select-All').fadeTo('fast', 1);
      $('.Select-Channel').fadeTo('fast', 1);
      $('.Select-Ind').fadeTo('fast', 1);
      $('.Frequencies').fadeTo('fast', 1);
      $('.Select-All :input').prop('disabled', false);
      $('.Select-Channel :input').prop('disabled', false);
      $('.Select-Ind :input').prop('disabled', false);
      $('.Frequencies :input').prop('disabled', false);
      }
      // could disable controls until a selection is made
      // LPD Classification Checked -- disable GPD and LPD2
      function disableDiv(ctrl) {
      $(ctrl).fadeTo('fast', 0.49);
      document.getElementById(
      ctrl.replace('#', '') + '-CHECK'
      ).checked = false;
      unCheck(ctrl);
      }
      function unCheck(ctrl) {
      $(ctrl)
      .find(':input')
      .prop({ checked: false, disabled: true });
      }
      function enableDiv(ctrl) {
      $(ctrl).fadeTo('fast', 1);
      $(ctrl)
      .find(':input')
      .prop('disabled', false);
      }
      document.getElementById('LPD-CHECK').onclick = function() {
      enableDiv('#LPD');
      console.log(this.checked);
      if (this.checked == false) {
      disableDiv('#LPD');
      disableDiv('#LPD2');
      disableControls();
      // enableDiv("#GPD");
      // enableDiv("#LPD2");
      } else {
      enableControls();
      disableDiv('#GPD');
      disableDiv('#LPD2');
      }
      };
      document.getElementById('GPD-CHECK').onclick = function() {
      enableDiv('#GPD');
      if (this.checked == false) {
      disableDiv('#GPD');
      disableControls();
      // enableDiv('#LPD');
      // enableDiv('#LPD2');
      } else {
      enableControls();
      disableDiv('#LPD');
      disableDiv('#LPD2');
      }
      };
      document.getElementById('LPD2-CHECK').onclick = function() {
      enableDiv('#LPD2');
      if (this.checked == false) {
      // enableDiv('#GPD');
      disableDiv('#LPD2');
      } else {
      disableDiv('#GPD');
      enableDiv('#LPD');
      enableControls();
      document.getElementById('LPD-CHECK').checked = true;
      // disableDiv('#LPD');
      }
      };
      //Hot Keys
      var down = [];
      $(document)
      .keydown(function(e) {
      down[e.keyCode] = true;
      })
      .keyup(function(e) {
      if (down[76] && down[50]) {
      //could change to tigger('click')
      enableDiv('#LPD2');
      document.getElementById('LPD2-CHECK').checked = true;
      }
      down[e.keyCode] = false;
      });
      var chosenChannel = '';
      document.onkeydown = function(e) {
      // select all?
      if (e.ctrlKey && e.shiftKey && e.which == 65) {
      $('#select_all').trigger('click');
      e.preventDefault();
      }
      // select all channel
      if (e.ctrlKey && e.which >= 49 && e.which <= 53) {
      $('#select_channel_' + e.key).trigger('click');
      e.preventDefault();
      }
      // enter channel
      if (e.shiftKey && e.which >= 49 && e.which <= 53) {
      chosenChannel = '#checklist' + (e.which - 48).toString();
      e.preventDefault();
      }
      // delete channel
      if (e.altKey && e.which >= 49 && e.which <= 53) {
      if (chosenChannel) {
      $(chosenChannel + ' input')
      .eq(e.key - 1)
      .trigger('click');
      } else {
      alert('You must first select a channel with SHIFT + CHAIN #');
      }
      e.preventDefault();
      }
      if (!e.ctrlKey && !e.shiftKey && !e.altKey) {
      switch (e.which) {
      // SELECT/DE-SELECT LPD
      case 76:
      // alert('l');
      if (document.getElementById('LPD-CHECK').checked == true) {
      disableDiv('#LPD');
      disableDiv('#LPD2');
      disableDiv('#GPD');
      disableControls();
      } else {
      document.getElementById('LPD-CHECK').checked = true;
      enableDiv('#LPD');
      disableDiv('#GPD');
      enableControls();
      }
      break;
      // SELECT/DE-SELECT GPD
      case 71:
      // alert('g');
      if (document.getElementById('GPD-CHECK').checked == true) {
      disableDiv('#LPD');
      disableDiv('#LPD2');
      disableDiv('#GPD');
      disableControls();
      } else {
      document.getElementById('GPD-CHECK').checked = true;
      disableDiv('#LPD');
      disableDiv('#LPD2');
      enableDiv('#GPD');
      enableControls();
      }
      break;
      case 192:
      // alert('<0.5');
      $('input[name=frequency]:eq(0)').prop('checked', true);
      break;
      case 9:
      // alert('0.5');
      $('input[name=frequency]:eq(1)').prop('checked', true);
      break;
      case 49:
      // alert('1.0');
      $('input[name=frequency]:eq(2)').prop('checked', true);
      break;
      case 81:
      // alert('1.5');
      $('input[name=frequency]:eq(3)').prop('checked', true);
      break;
      case 50:
      // alert('2.0');
      $('input[name=frequency]:eq(4)').prop('checked', true);
      break;
      case 87:
      // alert('2.5');
      $('input[name=frequency]:eq(5)').prop('checked', true);
      break;
      case 51:
      // alert('3.0');
      $('input[name=frequency]:eq(6)').prop('checked', true);
      break;
      case 69:
      // alert('3.5');
      $('input[name=frequency]:eq(7)').prop('checked', true);
      break;
      case 52:
      // alert('>=4.0');
      $('input[name=frequency]:eq(8)').prop('checked', true);
      }
      }
      };
      });
